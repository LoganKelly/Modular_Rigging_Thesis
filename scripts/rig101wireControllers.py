# 101controlMaker
##
##########################
##
## AUTHOR :        Javier "Goosh" Solsona & Lluis Llobera
##                (jsolsona@digital-dreams.net) (lluisllobera@hotmail.com)
##
## Copyright (C) 2003 Rigging 101 - Javier Solsona, Lluis Llobera
##
## CREATION DATE :    19/02/2003
## UPDATED DATE :    22/05/2003
##
## VERSION :        2.0
##
## DESCRIPTION :    Creates wire controllers to use as manipulators
##
## HOW TO USE :        run "rig101wireControllers;" on the command line
##
## UPDATED INFO:    I refactored the original MEL code using Python and PyMel to make for a cleaner
##            interface with future rigging code written using PyMel.  In addition, I re-organized
##            the functions into methods inside of a class called rig101.  This will help to reduce
##            pollution of the global name space.  The methods for creating the controllers also
##            return PyNode objects for the controllers to the calling function.  For more reference on
##            PyMel see:
##            http://www.luma-pictures.com/tools/pymel/docs/1.0/dev.html
##            - Logan Kelly 6/13/2011
##
##########################


from pymel.all import *
import maya.mel as mel

def enum(**enums):
    return type('Enum', (), enums)

ControllerShapes = enum(FOURARROWCIRCLE = 'FourArrowCircle',TRIANGLE = 'Triangle',SQUARE = 'Square',
                        ANGLE='Angle',CROSS='Cross',FATCROSS='FatCross',CIRCLE='Circle',TWOSEVENTYARC='270Arc',
                        ONEEIGHTYARC='180Arc',SPIRAL='Spiral',HALFPYRAMID='HalfPyramid',PYRAMID='Pyramid',
                        HALFSPEAR='HalfSpear',SPEAR='Spear',CUBE='Cube',SPHERE='Sphere',HEXAGON='Hexagon',
                        ROMBUS='Rombus',ROMBUSTWO='Rombus2',ROMBUSTHREE='Rombus3',CONE='Cone',
                        DIRSINGLETHIN='DirSingleThin',DIRSINGLENORMAL='DirSingleNormal',
                        DIRSINGLEFAT='DirSingleFat',DIRDOUBLETHIN='DirDoubleThin',
                        DIRDOUBLENORMAL='DirDoubleNormal',DIRDOUBLEFAT='DirDoubleFat',
                        DIRFOURTHIN='DirFourThin',DIRFOURNORMAL='DirFourNormal',DIRFOURFAT='DirFourFat',
                        DIREIGHT='DirEight',ROTNINETYTHIN='Rot90Thin',ROTNINETYNORMAL='Rot90Normal',
                        ROTNINETYFAT='Rot90Fat',ROTONEEIGHTYTHIN='Rot180Thin',
                        ROTONEEIGHTYNORMAL='Rot180Normal',ROTONEEIGHTYFAT='Rot180Fat',TRANSFORM='Transform',
                        FOOTPRINT='FootPrint',HAND='Hand',VISION='Vision',ARROWSONBALL='ArrowsOnBall',
                        COG='Cog',SUN='Sun',PIN='Pin',JACK='Jack',NAIL='Nail',TWONAIL='2Nail',FOURNAIL='4Nail',
                        DUMBELL='Dumbell',POINTER='Pointer',AIM='Aim',AIMTWO='Aim2',SWITCH='Switch',
                        DOUBLEPLUS='DoublePlus',CYLINDER='Cylinder',HEX='Hex',TRAPEZOID='Trapezoid',
                        PAWFOURTOES='Paw4Toes',FOURARROWSCIRCULAR='FourArrowsCircular',
                        HEADCONTROLLER='HeadController',NECKBASECONTROLLER='NeckBaseController',
                        JAWCONTROLLER='JawController',TWONAILLONG='2NailLong')

class rig101:
    controller = None
    controls = [None,]

    def __init__(self):
        return
    
    def rig101WCTriangle(self):
        controller = curve(d=1,p=[(-1.03923,0,0.6),(1.03923,0,0.6),(0,0,-1.2),(-1.03923,0,0.6)],k=[0,1,2,3],n='controller1_CTL')
        return controller

    def rig101WCSquare(self):
        controller = curve(d=1,p=[(1,0,-1),(-1,0,-1),(-1,0,1),(1,0,1),(1,0,-1)],k=[0,1,2,3,4],n='controller1_CTL')
        return controller

    def rig101WCAngle(self):
        controller = curve(d=1,p=[(-1,0,-3),(1,0,-3),(1,0,1),(-3,0,1),(-3,0,-1),(-1,0,-1),(-1,0,-3)],k=[0,1,2,3,4,5,6],n='controller1_CTL')
        return controller

    def rig101WCCross(self):
        controller = curve(d=1,p=[(0.4,0,-0.4),(0.4,0,-2),(-0.4,0,-2),(-0.4,0,-0.4),(-2,0,-0.4),(-2,0,0.4),(-0.4,0,0.4),(-0.4,0,2),(0.4,0,2),(0.4,0,0.4),(2,0,0.4),(2,0,-0.4),(0.4,0,-0.4)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12],n='controller1_CTL')
        return controller

    def rig101WCFatCross(self):
        controller = curve(d=1,p=[(2,0,1),(2,0,-1),(1,0,-1),(1,0,-2),(-1,0,-2),(-1,0,-1),(-2,0,-1),(-2,0,1),(-1,0,1),(-1,0,2),(1,0,2),(1,0,1),(2,0,1)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12],n='controller1_CTL')
        return controller

    def rig101WCCircle(self):
        circle(c=(0,0,0),nr=(0,1,0),sw=(360),r=1,d=3,ut=0,tol=0.01,s=8,ch=0,n='controller1_CTL')
        controller = PyNode( 'controller1_CTL' )
        return controller

    def rig101WC270Arc(self):
        controller = curve(d=3,p=[(-0.707107,0,-0.707107),(-0.570265,0,-0.843948),(-0.205819,0,-1.040044),(0.405223,0,-0.978634),(0.881027,0,-0.588697),(1.059487,0,0),(0.881027,0,0.588697),(0.405223,0,0.978634),(-0.205819,0,1.040044),(-0.570265,0,0.843948),(-0.707107,0,0.707107)],k=[0,0,0,1,2,3,4,5,6,7,8,8,8],n='controller1_CTL')
        return controller
    
    def rig101WC180Arc(self):        
        circle(c=(0,0,0),nr=(0,1,0),sw=(180),r=1,d=3,ut=0,tol=0.01,s=8,ch=0,n='controller1_CTL')
        controller = PyNode( 'controller1_CTL' )
        return controller

    def rig101WCSpiral(self):
        controller = curve(d=3,p=[(0.474561,0,-1.241626),(0.171579,0,-1.214307),(-0.434384,0,-1.159672),(-1.124061,0,-0.419971),(-1.169741,0,0.305922),(-0.792507,0,1.018176),(-0.0412486,0,1.262687),(0.915809,0,1.006098),(1.258635,0,0.364883),(1.032378,0,-0.461231),(0.352527,0,-0.810017),(-0.451954,0,-0.43765),(-0.634527,0,0.208919),(-0.0751226,0,0.696326),(0.292338,0,0.414161),(0.476068,0,0.273078)],k=[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,13,13],n='controller1_CTL')
        return controller

    def rig101WC12Pyramid(self):
        controller = curve(d=1,p=[(-1,0,0),(0,0,1),(0,1,0),(-1,0,0),(1,0,0),(0,1,0),(1,0,0),(0,0,1),(0,1,0)],k=[0,1,2,3,4,5,6,7,8],n='controller1_CTL')
        return controller

    def rig101WCPyramid(self):
        controller = curve(d=1,p=[(0,2,0),(1,0,-1),(-1,0,-1),(0,2,0),(-1,0,1),(1,0,1),(0,2,0),(1,0,-1),(1,0,1),(-1,0,1),(-1,0,-1)],k=[0,1,2,3,4,5,6,7,8,9,10],n='controller1_CTL')
        return controller

    def rig101WC12Spear(self):
        controller = curve(d=1,p=[(0,2,0),(0,0,2),(0,0,-2),(0,2,0),(-2,0,0),(2,0,0),(0,2,0)],k=[0,1,2,3,4,5,6],n='controller1_CTL')
        return controller

    def rig101WCSpear(self):
        controller = curve(d=1,p=[(0,2,0),(0,0,2),(0,-2,0),(0,0,-2),(0,2,0),(0,-2,0),(0,0,0),(0,0,2),(0,0,-2),(2,0,0),(0,0,2),(-2,0,0),(0,0,-2),(0,0,2),(0,0,0),(-2,0,0),(2,0,0)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],n='controller1_CTL')
        return controller

    def rig101WCCube(self):
        controller = curve(d=1,p=[(0.5,0.5,0.5),(0.5,0.5,-0.5),(-0.5,0.5,-0.5),(-0.5,-0.5,-0.5),(0.5,-0.5,-0.5),(0.5,0.5,-0.5),(-0.5,0.5,-0.5),(-0.5,0.5,0.5),(0.5,0.5,0.5),(0.5,-0.5,0.5),(0.5,-0.5,-0.5),(-0.5,-0.5,-0.5),(-0.5,-0.5,0.5),(0.5,-0.5,0.5),(-0.5,-0.5,0.5),(-0.5,0.5,0.5)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],n='controller1_CTL')
        return controller

    def rig101WCSphere(self):
        controller = curve(d=1,p=[(0,0,1),(0,0.5,0.866025),(0,0.866025,0.5),(0,1,0),(0,0.866025,-0.5),(0,0.5,-0.866025),(0,0,-1),(0,-0.5,-0.866025),(0,-0.866025,-0.5),(0,-1,0),(0,-0.866025,0.5),(0,-0.5,0.866025),(0,0,1),(0.707107,0,0.707107),(1,0,0),(0.707107,0,-0.707107),(0,0,-1),(-0.707107,0,-0.707107),(-1,0,0),(-0.866025,0.5,0),(-0.5,0.866025,0),(0,1,0),(0.5,0.866025,0),(0.866025,0.5,0),(1,0,0),(0.866025,-0.5,0),(0.5,-0.866025,0),(0,-1,0),(-0.5,-0.866025,0),(-0.866025,-0.5,0),(-1,0,0),(-0.707107,0,0.707107),(0,0,1)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],n='controller1_CTL')
        return controller

    def rig101WCHexagon(self):
        controller = curve(d=1,p=[(-0.5,1,0.866025),(0.5,1,0.866025),(0.5,-1,0.866025),(1,-1,0),(1,1,0),(0.5,1,-0.866025),(0.5,-1,-0.866025),(-0.5,-1,-0.866026),(-0.5,1,-0.866026),(-1,1,-1.5885e-007),(-1,-1,-1.5885e-007),(-0.5,-1,0.866025),(-0.5,1,0.866025),(-1,1,-1.5885e-007),(-0.5,1,-0.866026),(0.5,1,-0.866025),(1,1,0),(0.5,1,0.866025),(0.5,-1,0.866025),(-0.5,-1,0.866025),(-1,-1,-1.5885e-007),(-0.5,-1,-0.866026),(0.5,-1,-0.866025),(1,-1,0)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],n='controller1_CTL')
        return controller

    def rig101WCRombus(self):
        controller = curve(d=1,p=[(0,1,0),(1,0,0),(0,0,1),(-1,0,0),(0,0,-1),(0,1,0),(0,0,1),(0,-1,0),(0,0,-1),(1,0,0),(0,1,0),(-1,0,0),(0,-1,0),(1,0,0)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13],n='controller1_CTL')
        return controller

    def rig101WCRombus2(self):
        controller = curve(d=1,p=[(0,0,2),(0,1,0),(0,0,-2),(0,-1,0),(-1,0,0),(0,1,0),(1,0,0),(0,-1,0),(0,0,2),(1,0,0),(0,0,-2),(-1,0,0),(0,0,2)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12],n='controller1_CTL')
        return controller

    def rig101WCRombus3(self):
        controller = curve(d=1,p=[(0,0,2),(-0.707107,0.707107,0),(0,0,-2),(0.707107,0.707107,0),(0,0,2),(0.707107,-0.707107,0),(0,0,-2),(-0.707107,-0.707107,0),(0.707107,-0.707107,0),(0.707107,0.707107,0),(-0.707107,0.707107,0),(-0.707107,-0.707107,0),(0,0,2)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12],n='controller1_CTL')
        return controller

    def rig101WCCone(self):
        controller = curve(d=1,p=[(0.5,-1,0.866025),(-0.5,-1,0.866025),(0,1,0),(0.5,-1,0.866025),(1,-1,0),(0,1,0),(0.5,-1,-0.866025),(1,-1,0),(0,1,0),(-0.5,-1,-0.866026),(0.5,-1,-0.866025),(0,1,0),(-1,-1,-1.5885e-007),(-0.5,-1,-0.866026),(0,1,0),(-0.5,-1,0.866025),(-1,-1,-1.5885e-007)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],n='controller1_CTL')
        return controller

    def rig101WCDirSingleThin(self):
        controller = curve(d=1,p=[(0,0,1),(0,0,-1),(-1,0,0),(0,0,-1),(1,0,0)],k=[0,1,2,3,4],n='controller1_CTL')
        return controller

    def rig101WCDirSingleNormal(self):
        controller = curve(d=1,p=[(0,0,-1.32),(-0.99,0,0),(-0.33,0,0),(-0.33,0,0.99),(0.33,0,0.99),(0.33,0,0),(0.99,0,0),(0,0,-1.32)],k=[0,1,2,3,4,5,6,7],n='controller1_CTL')
        return controller

    def rig101WCDirSingleFat(self):
        controller = curve(d=1,p=[(0,0,-0.99),(-0.66,0,0),(-0.33,0,0),(-0.33,0,0.66),(0.33,0,0.66),(0.33,0,0),(0.66,0,0),(0,0,-0.99)],k=[0,1,2,3,4,5,6,7],n='controller1_CTL')
        return controller

    def rig101WCDirDoubleThin(self):
        controller = curve(d=1,p=[(1,0,1),(0,0,2),(-1,0,1),(0,0,2),(0,0,-2),(-1,0,-1),(0,0,-2),(1,0,-1)],k=[0,1,2,3,4,5,6,7],n='controller1_CTL')
        return controller

    def rig101WCDirDoubleNormal(self):
        controller = curve(d=1,p=[(0,0,-2.31),(-0.99,0,-0.99),(-0.33,0,-0.99),(-0.33,0,0.99),(-0.99,0,0.99),(0,0,2.31),(0.99,0,0.99),(0.33,0,0.99),(0.33,0,-0.99),(0.99,0,-0.99),(0,0,-2.31)],k=[0,1,2,3,4,5,6,7,8,9,10],n='controller1_CTL')
        return controller

    def rig101WCDirDoubleFat(self):
        controller = curve(d=1,p=[(0,0,-1.35),(-0.66,0,-0.36),(-0.33,0,-0.36),(-0.33,0,0.36),(-0.66,0,0.36),(0,0,1.35),(0.66,0,0.36),(0.33,0,0.36),(0.33,0,-0.36),(0.66,0,-0.36),(0,0,-1.35)],k=[0,1,2,3,4,5,6,7,8,9,10],n='controller1_CTL')
        return controller

    def rig101WCDirFourThin(self):
        controller = curve(d=1,p=[(1.25,0,-0.5),(1.75,0,0),(1.25,0,0.5),(1.75,0,0),(-1.75,0,0),(-1.25,0,-0.5),(-1.75,0,0),(-1.25,0,0.5),(-1.75,0,0),(0,0,0),(0,0,1.75),(-0.5,0,1.25),(0,0,1.75),(0.5,0,1.25),(0,0,1.75),(0,0,-1.75),(0.5,0,-1.25),(0,0,-1.75),(-0.5,0,-1.25),(0,0,-1.75)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],n='controller1_CTL')
        return controller

    def rig101WCDirFourNormal(self):
        controller = curve(d=1,p=[(0,0,-1.98),(-0.495,0,-1.32),(-0.165,0,-1.32),(-0.165,0,-0.165),(-1.32,0,-0.165),(-1.32,0,-0.495),(-1.98,0,0),(-1.32,0,0.495),(-1.32,0,0.165),(-0.165,0,0.165),(-0.165,0,1.32),(-0.495,0,1.32),(0,0,1.98),(0.495,0,1.32),(0.165,0,1.32),(0.165,0,0.165),(1.32,0,0.165),(1.32,0,0.495),(1.98,0,0),(1.32,0,-0.495),(1.32,0,-0.165),(0.165,0,-0.165),(0.165,0,-1.32),(0.495,0,-1.32),(0,0,-1.98)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],n='controller1_CTL')
        return controller

    def rig101WCDirFourFat(self):
        controller = curve(d=1,p=[(0,0,-1.1025),(-0.33,0,-0.6075),(-0.165,0,-0.6075),(-0.165,0,-0.165),(-0.6075,0,-0.165),(-0.6075,0,-0.33),(-1.1025,0,0),(-0.6075,0,0.33),(-0.6075,0,0.165),(-0.165,0,0.165),(-0.165,0,0.6075),(-0.33,0,0.6075),(0,0,1.1025),(0.33,0,0.6075),(0.165,0,0.6075),(0.165,0,0.165),(0.6075,0,0.165),(0.6075,0,0.33),(1.1025,0,0),(0.6075,0,-0.33),(0.6075,0,-0.165),(0.165,0,-0.165),(0.165,0,-0.6075),(0.33,0,-0.6075),(0,0,-1.1025)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],n='controller1_CTL')
        return controller

    def rig101WCDirEight(self):
        controller = curve(d=1,p=[(-1.8975,0,0),(-1.4025,0,0.37125),(-1.4025,0,0.12375),(-0.380966,0,0.157801),(-1.079222,0,0.904213),(-1.254231,0,0.729204),(-1.341735,0,1.341735),(-0.729204,0,1.254231),(-0.904213,0,1.079222),(-0.157801,0,0.380966),(-0.12375,0,1.4025),(-0.37125,0,1.4025),(0,0,1.8975),(0.37125,0,1.4025),(0.12375,0,1.4025),(0.157801,0,0.380966),(0.904213,0,1.079222),(0.729204,0,1.254231),(1.341735,0,1.341735),(1.254231,0,0.729204),(1.079222,0,0.904213),(0.380966,0,0.157801),(1.4025,0,0.12375),(1.4025,0,0.37125),(1.8975,0,0),(1.4025,0,-0.37125),(1.4025,0,-0.12375),(0.380966,0,-0.157801),(1.079222,0,-0.904213),(1.254231,0,-0.729204),(1.341735,0,-1.341735),(0.729204,0,-1.254231),(0.904213,0,-1.079222),(0.157801,0,-0.380966),(0.12375,0,-1.4025),(0.37125,0,-1.4025),(0,0,-1.8975),(-0.37125,0,-1.4025),(-0.12375,0,-1.4025),(-0.157801,0,-0.380966),(-0.904213,0,-1.079222),(-0.729204,0,-1.254231),(-1.341735,0,-1.341735),(-1.254231,0,-0.729204),(-1.079222,0,-0.904213),(-0.380966,0,-0.157801),(-1.4025,0,-0.12375),(-1.4025,0,-0.37125),(-1.8975,0,0)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],n='controller1_CTL')
        return controller

    def rig101WCRot90Thin(self):
        controller = curve(d=1,p=[(-1.026019,0,0),(-0.947961,0,0.392646),(-0.725413,0,0.725516),(-0.393028,0,0.947932),(-0.13006,0,1),(0.0107043,0,1.001418),(-0.339542,0,0.5442),(0.0107043,0,1.001418),(-0.446514,0,1.351664)],k=[0,1,2,3,4,5,6,7,8],n='controller1_CTL')
        return controller

    def rig101WCRot90Normal(self):
        controller = curve(d=1,p=[(-0.251045,0,1.015808),(-0.761834,0,0.979696),(-0.486547,0,0.930468),(-0.570736,0,0.886448),(-0.72786,0,0.774834),(-0.909301,0,0.550655),(-1.023899,0,0.285854),(-1.063053,0,9.80765e-009),(-0.961797,0,8.87346e-009),(-0.926399,0,0.258619),(-0.822676,0,0.498232),(-0.658578,0,0.701014),(-0.516355,0,0.802034),(-0.440202,0,0.841857),(-0.498915,0,0.567734),(-0.251045,0,1.015808)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],n='controller1_CTL')
        return controller

    def rig101WCRot90Fat(self):
        controller = curve(d=1,p=[(-0.923366,0,0),(-1.128672,0,0),(-1.042702,0,0.431934),(-0.798049,0,0.798033),(-0.560906,0,0.946236),(-0.975917,0,1.036319),(-0.124602,0,1.096506),(-0.537718,0,0.349716),(-0.440781,0,0.788659),(-0.652776,0,0.652998),(-0.853221,0,0.353358),(-0.923366,0,0)],k=[0,1,2,3,4,5,6,7,8,9,10,11],n='controller1_CTL')
        return controller

    def rig101WCRot180Thin(self):
        controller = curve(d=1,p=[(-0.446514,0,-1.351664),(0.0107043,0,-1.001418),(-0.339542,0,-0.5442),(0.0107043,0,-1.001418),(-0.13006,0,-1),(-0.393028,0,-0.947932),(-0.725413,0,-0.725516),(-0.947961,0,-0.392646),(-1.026019,0,0),(-0.947961,0,0.392646),(-0.725413,0,0.725516),(-0.393028,0,0.947932),(-0.13006,0,1),(0,0,1),(-0.339542,0,0.5442),(0,0,1),(-0.446514,0,1.351664)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],n='controller1_CTL')
        return controller

    def rig101WCRot180Normal(self):
        controller = curve(d=1,p=[(-0.251045,0,-1.015808),(-0.761834,0,-0.979696),(-0.486547,0,-0.930468),(-0.570736,0,-0.886448),(-0.72786,0,-0.774834),(-0.909301,0,-0.550655),(-1.023899,0,-0.285854),(-1.063053,0,9.80765e-009),(-1.023899,0,0.285854),(-0.909301,0,0.550655),(-0.72786,0,0.774834),(-0.570736,0,0.886448),(-0.486547,0,0.930468),(-0.761834,0,0.979696),(-0.251045,0,1.015808),(-0.498915,0,0.567734),(-0.440202,0,0.841857),(-0.516355,0,0.802034),(-0.658578,0,0.701014),(-0.822676,0,0.498232),(-0.926399,0,0.258619),(-0.961797,0,8.87346e-009),(-0.926399,0,-0.258619),(-0.822676,0,-0.498232),(-0.658578,0,-0.701014),(-0.516355,0,-0.802034),(-0.440202,0,-0.841857),(-0.498915,0,-0.567734),(-0.251045,0,-1.015808)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],n='controller1_CTL')
        return controller

    def rig101WCRot180Fat(self):
        controller = curve(d=1,p=[(-0.124602,0,-1.096506),(-0.975917,0,-1.036319),(-0.559059,0,-0.944259),(-0.798049,0,-0.798033),(-1.042702,0,-0.431934),(-1.128672,0,0),(-1.042702,0,0.431934),(-0.798049,0,0.798033),(-0.560906,0,0.946236),(-0.975917,0,1.036319),(-0.124602,0,1.096506),(-0.537718,0,0.349716),(-0.440781,0,0.788659),(-0.652776,0,0.652998),(-0.853221,0,0.353358),(-0.923366,0,0),(-0.853221,0,-0.353358),(-0.652776,0,-0.652998),(-0.439199,0,-0.785581),(-0.537718,0,-0.349716),(-0.124602,0,-1.096506)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],n='controller1_CTL')
        return controller

    def rig101WCTransform(self):
        circle(c=(0,0,0),nr=(0,1,0),sw=360,r=1.5,d=3,ut=0,tol=0.01,s=8,ch=0,n='Transform_CTL')
        #dirty hack...for some reason circle doesn't return a PyNode object
        circleHelper = PyNode('Transform_CTL')
        arrows = [None,None,None,None]
        arrowShapes = [None,None,None,None]
        arrows[0] = curve(d=1,p=[(1.75625,0,0.115973),(1.75625,0,-0.170979),(2.114939,0,-0.170979),(2.114939,0,-0.314454),(2.473628,0,-0.0275029),(2.114939,0,0.259448),(2.114939,0,0.115973),(1.75625,0,0.115973)],k=[0,1,2,3,4,5,6,7],n='helpArrow1_CTL')
        arrows[0].setAttr('overrideEnabled',1)
        arrows[0].setAttr('overrideDisplayType',2)
        arrowShapes[0] = PyNode(arrows[0].name()+'Shape')
        arrowShapes[0].setAttr('template',1)
        parent(arrowShapes[0], circleHelper, s=True)

        arrows[1] = curve(d=1,p=[(0.143476,0,-1.783753),(0.143476,0,-2.142442),(0.286951,0,-2.142442),(0,0,-2.501131),(-0.286951,0,-2.142442),(-0.143476,0,-2.142442),(-0.143476,0,-1.783753),(0.143476,0,-1.783753)],k=[0,1,2,3,4,5,6,7],n='helpArrow2_CTL')
        arrows[1].setAttr('overrideEnabled',1)
        arrows[1].setAttr('overrideDisplayType',2)
        arrowShapes[1] = PyNode(arrows[1].name()+'Shape')
        arrowShapes[1].setAttr('template',1)
        parent(arrowShapes[1], circleHelper, s=True)

        arrows[2] = curve(d=1,p=[(-1.75625,0,-0.170979),(-2.114939,0,-0.170979),(-2.114939,0,-0.314454),(-2.473628,0,-0.0275029),(-2.114939,0,0.259448),(-2.114939,0,0.115973),(-1.75625,0,0.115973),(-1.75625,0,-0.170979)],k=[0,1,2,3,4,5,6,7],n='helpArrow3_CTL')
        arrows[2].setAttr('overrideEnabled',1)
        arrows[2].setAttr('overrideDisplayType',2)
        arrowShapes[2] = PyNode(arrows[2].name()+'Shape')
        arrowShapes[2].setAttr('template',1)
        parent(arrowShapes[2], circleHelper, s=True)

        arrows[3] = curve(d=1,p=[(-0.143476,0,1.728747),(-0.143476,0,2.087436),(-0.286951,0,2.087436),(0,0,2.446125),(0.286951,0,2.087436),(0.143476,0,2.087436),(0.143476,0,1.728747),(-0.143476,0,1.728747)],k=[0,1,2,3,4,5,6,7],n='helpArrow4_CTL')
        arrows[3].setAttr('overrideEnabled',1)
        arrows[3].setAttr('overrideDisplayType',2)
        arrowShapes[3] = PyNode(arrows[3].name()+'Shape')
        arrowShapes[3].setAttr('template',1)
        parent(arrowShapes[3], circleHelper, s=True)
        
        transformGroup = group(circleHelper, arrows, n='Transform_GRP')
        return transformGroup

    def rig101WCFootPrint(self):
        controller = curve(d=1,p=[(-0.081122,0,-1.11758),(0.390719,0,-0.921584),(0.514124,0,-0.616704),(0.412496,0,0.0293557),(0.86256,0,0.552008),(0.920632,0,1.161772),(0.775452,0,1.669908),(0.38346,0,2.011088),(-0.131936,0,2.330484),(-0.552964,0,2.308708),(-0.654588,0,1.691688),(-0.57474,0,0.63912),(-0.364226,0,0.109206),(-0.531184,0,-0.39893),(-0.465852,0,-0.841736),(-0.081122,0,-1.11758)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],n='controller1_CTL')
        return controller

    def rig101WCHand(self):
        controllers = [None,None,None,None,None,None]
        controllers[0] = curve(d=1,p=[(-0.718223,0,-0.925311),(-0.718223,0,0.462656),(-0.462656,0,0.925311),(0,0,0.925311),(0.170548,0,0.873409),(0.341096,0,0.925311),(0.925311,0,0.925311),(0.925311,0,0),(0.718223,0,-0.462656),(0.718223,0,-0.925311),(0.457051,0,-1.156639),(-0.462656,0,-1.156639),(-0.718223,0,-0.925311)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12],n='hand_CTL')
        controllers[1] = curve(d=1,p=[(-0.718223,0,-0.925311),(-0.718223,0,-2.544605),(-0.457051,0,-2.544605),(-0.462656,0,-1.156639)],k=[0,1,2,3],n='pinky_CTL')
        controllers[2] = curve(d=1,p=[(-0.326465,0,-1.156639),(-0.326465,0,-2.775933),(-0.065293,0,-2.775933),(-0.065293,0,-1.156639)],k=[0,1,2,3],n='ring_CTL')
        controllers[3] = curve(d=1,p=[(0.065293,0,-1.156639),(0.065293,0,-3.007261),(0.326465,0,-3.007261),(0.326465,0,-1.156639)],k=[0,1,2,3],n='middle_CTL')
        controllers[4] = curve(d=1,p=[(0.457051,0,-1.156639),(0.457051,0,-2.775933),(0.718223,0,-2.775933),(0.718223,0,-0.925311)],k=[0,1,2,3],n='index_CTL')
        controllers[5] = curve(d=1,p=[(0.925311,0,0),(1.156639,0,-0.231328),(1.387967,0,-0.693983),(1.619294,0,-0.462656),(1.387967,0,0.231328),(0.925311,0,0.925311)],k=[0,1,2,3,4,5],n='thumb_CTL')
        parent(controllers[1],controllers[2],controllers[3],controllers[4],controllers[5],controllers[0])

#        for controller in controllers[1:6]:
#            controller.translateX.setLocked(True)
#            controller.translateX.setKeyable(False)
#            controller.translateY.setLocked(True)
#            controller.translateY.setKeyable(False)
#            controller.translateZ.setLocked(True)
#            controller.translateZ.setKeyable(False)
#            controller.rotateX.setLocked(True)
#            controller.rotateX.setKeyable(False)
#            controller.rotateY.setLocked(True)
#            controller.rotateY.setKeyable(False)
#            controller.rotateZ.setLocked(True)
#            controller.rotateZ.setKeyable(False)
#            controller.scaleX.setLocked(True)
#            controller.scaleX.setKeyable(False)
#            controller.scaleY.setLocked(True)
#            controller.scaleY.setKeyable(False)
#            controller.scaleZ.setLocked(True)
#            controller.scaleZ.setKeyable(False)
#            controller.visibility.setLocked(True)
#            controller.visibility.setKeyable(False)
        return controllers

    def rig101WCVision(self):
        helperVisionR = curve(d=1,p=[(-0.870728,-0.000469542,-0.28747),(-0.667456,-0.000469542,-0.203272),(-0.583258,-0.000469542,0),(-0.667456,-0.000469542,0.203272),(-0.870728,-0.000469542,0.28747),(-1.073999,-0.000469542,0.203272),(-1.158197,-0.000469542,0),(-1.073999,-0.000469542,-0.203272),(-0.870728,-0.000469542,-0.28747)],k=[0,1,2,3,4,5,6,7,8],n='helperVisionR_CTL')
        xform(cp=True)
        helperVisionL = curve(d=1,p=[(0.870728,-0.000469542,-0.28747),(1.073999,-0.000469542,-0.203272),(1.158197,-0.000469542,0),(1.073999,-0.000469542,0.203272),(0.870728,-0.000469542,0.28747),(0.667456,-0.000469542,0.203272),(0.583258,-0.000469542,0),(0.667456,-0.000469542,-0.203272),(0.870728,-0.000469542,-0.28747)],k=[0,1,2,3,4,5,6,7,8],n='helperVisionL_CTL')
        xform(cp=True)
        helperVision = curve(d=1,p=[(-0.583258,-0.000469542,0),(0.583258,-0.000469542,0)],k=[0,1],n='helperVision_CTL')
        parent(helperVisionR,helperVisionL,helperVision)
        return helperVision

    def rig101WCArrowsOnBall(self):
        controller = curve(d=1,p=[(0,0.35,-1.001567),(-0.336638,0.677886,-0.751175),(-0.0959835,0.677886,-0.751175),(-0.0959835,0.850458,-0.500783),(-0.0959835,0.954001,-0.0987656),(-0.500783,0.850458,-0.0987656),(-0.751175,0.677886,-0.0987656),(-0.751175,0.677886,-0.336638),(-1.001567,0.35,0),(-0.751175,0.677886,0.336638),(-0.751175,0.677886,0.0987656),(-0.500783,0.850458,0.0987656),(-0.0959835,0.954001,0.0987656),(-0.0959835,0.850458,0.500783),(-0.0959835,0.677886,0.751175),(-0.336638,0.677886,0.751175),(0,0.35,1.001567),(0.336638,0.677886,0.751175),(0.0959835,0.677886,0.751175),(0.0959835,0.850458,0.500783),(0.0959835,0.954001,0.0987656),(0.500783,0.850458,0.0987656),(0.751175,0.677886,0.0987656),(0.751175,0.677886,0.336638),(1.001567,0.35,0),(0.751175,0.677886,-0.336638),(0.751175,0.677886,-0.0987656),(0.500783,0.850458,-0.0987656),(0.0959835,0.954001,-0.0987656),(0.0959835,0.850458,-0.500783),(0.0959835,0.677886,-0.751175),(0.336638,0.677886,-0.751175),(0,0.35,-1.001567)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],n='controller1_CTL')
        return controller

    def rig101WCCog(self):
        controller = curve(d=3,p=[(7.06316e-009,0,-1),(0.104714,0,-0.990425),(0.314142,0,-0.971274),(0.597534,0,-0.821244),(0.822435,0,-0.597853),(0.96683,0,-0.314057),(1.016585,0,-2.28604e-005),(0.96683,0,0.314148),(0.822435,0,0.597532),(0.597534,0,0.822435),(0.314142,0,0.96683),(1.22886e-008,0,1.016585),(-0.314142,0,0.96683),(-0.597534,0,0.822435),(-0.822435,0,0.597532),(-0.96683,0,0.314148),(-1.016585,0,-2.29279e-005),(-0.96683,0,-0.314057),(-0.822435,0,-0.597853),(-0.597534,0,-0.821244),(-0.314142,0,-0.971274),(-0.104714,0,-0.990425),(7.06316e-009,0,-1)],k=[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,20,20],n='controller1_CTL')
        controllerShape = controller.getShape()
        select(controllerShape.ep[1],controllerShape.ep[3],controllerShape.ep[5],controllerShape.ep[7],controllerShape.ep[9],controllerShape.ep[11],controllerShape.ep[13],controllerShape.ep[15],controllerShape.ep[17],controllerShape.ep[19])
        scale(0.732056,0.732056,0.732056)
        select(cl=True)
        return controller

    def rig101WCSun(self):
        controllers = [None, None]
        controllerShapes = [None, None]
        circle(c=(0,0,0),nr=(0,1,0),sw=360,r=1,d=3,ut=0,tol=0.01,s=16,ch=1,n='controller1_CTL')
        controllers[0] = PyNode('controller1_CTL')
        controllerShapes[0] = controllers[0].getShape()
        select(controllerShapes[0].cv[0],controllerShapes[0].cv[2],controllerShapes[0].cv[4],controllerShapes[0].cv[6],controllerShapes[0].cv[8],controllerShapes[0].cv[10],controllerShapes[0].cv[12],controllerShapes[0].cv[14])
        controlCluster = cluster(relative=True,envelope=1)
        setAttr(controlCluster[0]+'Handle.scale',(0.5,0.5,0.5))
        circle(c=(0,0,0),nr=(0,1,0),sw=360,r=0.25,d=3,ut=0,tol=0.01,s=8,ch=1,n='controller2_CTL')
        controllers[1] = PyNode('controller2_CTL')
        parent(controllers[1],controllers[0])
        delete(controllers[0], ch=True)
        return controllers

    def rig101WCPin(self):
        controller = curve(d=1,p=[(0,0,0),(0,0,-1),(0,0.5,-1),(0,0.5,-0.5),(0,1.5,-0.5),(0,1.5,-1),(0,2.5,-1),(0,2.5,1),(0,1.5,1),(0,1.5,0.5),(0,0.5,0.5),(0,0.5,1),(0,0,1),(0,0,0),(1,0,0),(1,0.5,0),(0.5,0.5,0),(0.5,1.5,0),(1,1.5,0),(1,2.5,0),(-1,2.5,0),(-1,1.5,0),(-0.5,1.5,0),(-0.5,0.5,0),(-1,0.5,0),(-1,0,0),(0,0,0)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],n='controller1_CTL')
        return controller

    def rig101WCJack(self):
        controller = curve(d=1,p=[(0,0,0),(0.75,0,0),(1,0.25,0),(1.25,0,0),(1,-0.25,0),(0.75,0,0),(1,0,0.25),(1.25,0,0),(1,0,-0.25),(1,0.25,0),(1,0,0.25),(1,-0.25,0),(1,0,-0.25),(0.75,0,0),(0,0,0),(-0.75,0,0),(-1,0.25,0),(-1.25,0,0),(-1,-0.25,0),(-0.75,0,0),(-1,0,0.25),(-1.25,0,0),(-1,0,-0.25),(-1,0.25,0),(-1,0,0.25),(-1,-0.25,0),(-1,0,-0.25),(-0.75,0,0),(0,0,0),(0,0.75,0),(0,1,-0.25),(0,1.25,0),(0,1,0.25),(0,0.75,0),(-0.25,1,0),(0,1.25,0),(0.25,1,0),(0,1,0.25),(-0.25,1,0),(0,1,-0.25),(0.25,1,0),(0,0.75,0),(0,0,0),(0,-0.75,0),(0,-1,-0.25),(0,-1.25,0),(0,-1,0.25),(0,-0.75,0),(-0.25,-1,0),(0,-1.25,0),(0.25,-1,0),(0,-1,-0.25),(-0.25,-1,0),(0,-1,0.25),(0.25,-1,0),(0,-0.75,0),(0,0,0),(0,0,-0.75),(0,0.25,-1),(0,0,-1.25),(0,-0.25,-1),(0,0,-0.75),(-0.25,0,-1),(0,0,-1.25),(0.25,0,-1),(0,0.25,-1),(-0.25,0,-1),(0,-0.25,-1),(0.25,0,-1),(0,0,-0.75),(0,0,0),(0,0,0.75),(0,0.25,1),(0,0,1.25),(0,-0.25,1),(0,0,0.75),(-0.25,0,1),(0,0,1.25),(0.25,0,1),(0,0.25,1),(-0.25,0,1),(0,-0.25,1),(0.25,0,1),(0,0,0.75)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],n='controller1_CTL')
        return controller

    def rig101WCNail(self):
        controller = curve(d=1,p=[(0,0,0),(-2,0,0),(-2.292893,0,0.707107),(-3,0,1),(-3.707107,0,0.707107),(-4,0,0),(-3.707107,0,-0.707107),(-3,0,-1),(-2.292893,0,-0.707107),(-2,0,0),(-2.292893,0,0.707107),(-3.707107,0,-0.707107),(-4,0,0),(-3.707107,0,0.707107),(-2.292893,0,-0.707107)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],n='controller1_CTL')
        return controller

    def rig101WC2Nail(self):
        controller = curve(d=1,p=[(0,0,0),(-2,0,0),(-2.292893,0,-0.707107),(-3,0,-1),(-3.707107,0,-0.707107),(-4,0,0),(-3.707107,0,0.707107),(-3,0,1),(-2.292893,0,0.707107),(-2,0,0),(-2.292893,0,0.707107),(-3.707107,0,-0.707107),(-3,0,-1),(-2.292893,0,-0.707107),(-3.707107,0,0.707107),(-3,0,1),(-2.292893,0,0.707107),(-2,0,0),(0,0,0),(2,0,0),(2.292893,0,-0.707107),(3,0,-1),(3.707107,0,-0.707107),(4,0,0),(3.707107,0,0.707107),(3,0,1),(2.292893,0,0.707107),(2,0,0),(2.292893,0,0.707107),(3.707107,0,-0.707107),(3,0,-1),(2.292893,0,-0.707107),(3.707107,0,0.707107)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],n='controller1_CTL')
        return controller

    def rig101WC4Nail(self):
        controller = curve(d=1,p=[(-2,0,0),(-2.292893,0,-0.707107),(-3,0,-1),(-3.707107,0,-0.707107),(-4,0,0),(-3.707107,0,0.707107),(-3,0,1),(-2.292893,0,0.707107),(-2,0,0),(-2.292893,0,0.707107),(-3.707107,0,-0.707107),(-4,0,0),(-3.707107,0,0.707107),(-2.292893,0,-0.707107),(-2,0,0),(0,0,0),(2,0,0),(2.292893,0,0.707107),(3,0,1),(3.707107,0,0.707107),(4,0,0),(3.707107,0,-0.707107),(3,0,-1),(2.292893,0,-0.707107),(2,0,0),(2.292893,0,0.707107),(3.707107,0,-0.707107),(4,0,0),(3.707107,0,0.707107),(2.292893,0,-0.707107),(2,0,0),(0,0,0),(0,0,2),(-0.707107,0,2.292893),(-1,0,3),(-0.707107,0,3.707107),(0,0,4),(0.707107,0,3.707107),(1,0,3),(0.707107,0,2.292893),(0,0,2),(0.707107,0,2.292893),(-0.707107,0,3.707107),(0,0,4),(0.707107,0,3.707107),(-0.707107,0,2.292893),(0,0,2),(0,0,-2),(-0.707107,0,-2.292893),(-1,0,-3),(-0.707107,0,-3.707107),(0,0,-4),(0.707107,0,-3.707107),(1,0,-3),(0.707107,0,-2.292893),(0,0,-2),(0.707107,0,-2.292893),(-0.707107,0,-3.707107),(0,0,-4),(0.707107,0,-3.707107),(-0.707107,0,-2.292893)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],n='controller1_CTL')
        return controller

    def rig101WCDumbell(self):
        controller = curve(d=1,p=[(-1.207536,0,0.0254483),(-1.123549,-0.202763,0.0254483),(-0.920786,-0.28675,0.0254483),(-0.718023,-0.202763,0.0254483),(-0.63504,-0.00242492,0.0254483),(0.634091,0,0.0254483),(0.718023,-0.202763,0.0254483),(0.920786,-0.28675,0.0254483),(1.123549,-0.202763,0.0254483),(1.207536,0,0.0254483),(1.123549,0.202763,0.0254483),(0.920786,0.28675,0.0254483),(0.718023,0.202763,0.0254483),(0.634091,0,0.0254483),(-0.63504,-0.00242492,0.0254483),(-0.718023,0.202763,0.0254483),(-0.920786,0.28675,0.0254483),(-1.123549,0.202763,0.0254483),(-1.207536,0,0.0254483)],k=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],n='controller1_CTL')
        return controller

    def rig101WCPointer(self):
        controller = curve(d=3,p=[(-1.508537,0,0),(-1.059622,0,-0.316884),(-0.161791,0,-0.950653),(-0.231491,0,-0.132891),(0.0199252,0,0.0238494),(0.843595,0,-0.46025),(1.7044,0,-1.130663),(1.00832,0,-0.442815),(0.512875,0,-0.0222687),(1.031578,0,0.508979),(1.701544,0,1.119434),(0.831393,0,0.447942),(0.018681,0,0.000680685),(-0.212893,0,0.0475119),(-0.15231,0,0.973132),(-1.056461,0,0.324377),(-1.508537,0,0)],k=[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,14,14],n='controller1_CTL')
        return controller

    def rig101WCAim(self):
        controller = curve(d=1,p=[(0,0,1),(0,0,-1),(0,2,0),(0,-2,0),(0,0,-1),(1,0,0),(-1,0,0),(0,0,-1)],k=[0,1,2,3,4,5,6,7],n='controller1_CTL')
        return controller

    def rig101WCAim2(self):
        self.controller = curve(d=1,p=[(0,0,1),(0,0,-1),(0,2,0),(0,-2,0),(0,0,-1),(2,0,0),(-2,0,0),(0,0,-1)],k=[0,1,2,3,4,5,6,7],n='controller1_CTL')
        return self.controller
    
    def rig101WCSwitch(self):
        self.controls[0] = self.rig101WCSquare()
        self.controls[0].setScale((1,1,1.758))
        self.controls[0].setAttr('template',True)
        makeIdentity(apply=True,t=False,r=False,s=True)
        self.controls[0].rename('SwitchOuterSquare_CRV')
        self.controls.append(self.rig101WCSquare())
        self.controls[1].setScale((0.05,1,1.2))
        self.controls[1].setAttr('template',True)
        makeIdentity(apply=True,t=False,r=False,s=True)
        self.controls[1].rename('SwitchSlider_CRV')
        self.controls.append(self.rig101WCSquare())
        self.controls[2].setScale((0.6,1,0.2))
        makeIdentity(apply=True,t=False,r=False,s=True)        
        setAttr(self.controls[2].getShape()+'.overrideEnabled',True)
        setAttr(self.controls[2].getShape()+'.overrideColor',13)
        self.controls[2].rename('Switch_CTL')
        self.controls.append(group(self.controls[0],self.controls[1],self.controls[2],n='SwitchControl_GRP'))
        return self.controls
    def rig101FourArrowCircle(self):
        mel.eval('createNode transform -n "FourArrowCircle_CTL";')
        mel.eval('setAttr ".rp" -type "double3" 0 3.7019639908308347e-027 0 ;')
        mel.eval('setAttr ".sp" -type "double3" 0 3.7019639908308347e-027 0 ;')
        mel.eval('createNode nurbsCurve -n "FourArrowCircle_CTLShape" -p "FourArrowCircle_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 3 89 1 noe-043 -4.0203411487384937 -0.66666666666665719 -7.1746481373430634e-043 -4.0203411487384937 -0.8333333333333286 -7.1746481373430634e-043 -4.0203411487384937 -1 -7.1746481373430634e-043 -4.0203411487384937 -0.66666666666666607 -7.1746481373430634e-043 -4.3536744820718276 -0.33333333333333393 -7.1746481373430634e-043 -4.6870078154051606 0 -7.1746481373430634e-043 -5.0203411487384937 0.33333333333333393 -7.1746481373430634e-043 -4.6870078154051606 0.66666666666666607 -7.1746481373430634e-043 -4.3536744820718276 1.0000000000000018 -7.1746481373430634e-043 -4.0203411487384937 0.83333333333333748 -7.1746481373430634e-043 -4.0203411487384937 0.66666666666667673 -7.1746481373430634e-043 -4.0203411487384937 0.50000000000001421 -7.1746481373430634e-043 -4.0203411487384937 0.50011372972729795 -7.1746481373430634e-043 -3.6724821078606844 0.50022745945458347 -7.1746481373430634e-043 -3.3246230669828751 0.50034118918186721 -7.1746481373430634e-043 -2.9767640261050654 1.1081773626995535 1.7455656912253724e-016 -2.8710662597512417 2.2697359053297887 1.3837647757891223e-016 -2.2802005249317823 2.8573670291322522 6.7053467214770655e-017 -1.1154073712845518 2.9599447953159945 2.9370633868225148e-017 -0.50000000039554493 3.3134102469620448 -7.1746481373430634e-043 -0.49999999999998757 3.666875697850271 -7.1746481373430634e-043 -0.49999999999998757 4.0203411487384937 -7.1746481373430634e-043 -0.49999999999998757 4.0203411487384937 -7.1746481373430634e-043 -0.49999999999998757 4.0203411487384937 -7.1746481373430634e-043 -0.49999999999998757 4.0203411487384937 -7.1746481373430634e-043 -0.49999999999998757 4.0203411487384937 -7.1746481373430634e-043 -0.66666666666665764 4.0203411487384937 -7.1746481373430634e-043 -0.83333333333332815 4.0203411487384937 -7.1746481373430634e-043 -0.99999999999999822 4.3536744820718258 -7.1746481373430634e-043 -0.66666666666666474 4.6870078154051598 -7.1746481373430634e-043 -0.33333333333333171 5.0203411487384937 -7.1746481373430634e-043 1.7763568394002505e-015 4.6870078154051598 -7.1746481373430634e-043 0.3333333333333357 4.3536744820718258 -7.1746481373430634e-043 0.66666666666666963 4.0203411487384937 -7.1746481373430634e-043 1.0000000000000036 4.0203411487384937 -7.1746481373430634e-043 0.83333333333334103 4.0203411487384937 -7.1746481373430634e-043 0.66666666666667851 4.0203411487384937 -7.1746481373430634e-043 0.50000000000001599 3.6644981261145748 -7.1746481373430634e-043 0.50011634002618566 3.3086551034906595 -7.1746481373430634e-043 0.50023268005235577 2.9528120808667442 -7.1746481373430634e-043 0.50034902007852544 2.8441472642054286 -6.8644883549372716e-017 1.1007148748785358 2.2566860149541608 -1.3878783100822375e-016 2.2462361387676388 1.1079612505335046 -1.745633001005555e-016 2.8304938874873518 0.50000000078074791 -1.8103232236554655e-016 2.9361410384780715 0.49999999999998579 -7.1746481373430634e-043 3.2975410756207655 0.49999999999998579 -7.1746481373430634e-043 3.6589411121796314 0.49999999999998579 -7.1746481373430634e-043 4.0203411487384972 0.66666666666665719 -7.1746481373430634e-043 4.0203411487384964 0.8333333333333286 -7.1746481373430634e-043 4.0203411487384946 1 -7.1746481373430634e-043 4.0203411487384937 0.66666666666666607 -7.1746481373430634e-043 4.3536744820718267 0.33333333333333393 -7.1746481373430634e-043 4.6870078154051606 0 -7.1746481373430634e-043 5.0203411487384937 -0.33333333333333393 -7.1746481373430634e-043 4.6870078154051606 -0.66666666666666607 -7.1746481373430634e-043 4.3536744820718267 -1 -7.1746481373430634e-043 4.0203411487384937 -0.83333333333333748 -7.1746481373430634e-043 4.0203411487384937 -0.66666666666667673 -7.1746481373430634e-043 4.0203411487384937 -0.50000000000001421 -7.1746481373430634e-043 4.0203411487384937 -0.5001181635630445 -7.1746481373430634e-043 3.6589205713518487 -0.50023632712606947 -7.1746481373430634e-043 3.2974999939652045 -0.50035449068909621 -7.1746481373430634e-043 2.9360794165785595 -1.1081857879096368 -1.7455630669436781e-016 2.8303796764970057 -2.2568540904278329 -1.3877752871159594e-016 2.2460678894955226 -2.8442604476585132 -6.8631368489845265e-017 1.1004941572065201 -2.9528752309440307 -3.1861706139905126e-017 0.50000000043347148 -3.3086972041269149 -7.1746481373430634e-043 0.49999999999998934 -3.6645191764327052 -7.1746481373430634e-043 0.49999999999998934 -4.020341148738499 -7.1746481373430634e-043 0.49999999999998934 -4.0203411487384955 -7.1746481373430634e-043 0.66666666666665941 -4.0203411487384955 -7.1746481373430634e-043 0.83333333333332993 -4.0203411487384919 -7.1746481373430634e-043 1 -4.3536744820718241 -7.1746481373430634e-043 0.66666666666666652 -4.6870078154051562 -7.1746481373430634e-043 0.33333333333333348 -5.0203411487384919 -7.1746481373430634e-043 0 -4.6870078154051562 -7.1746481373430634e-043 -0.33333333333333393 -4.3536744820718241 -7.1746481373430634e-043 -0.66666666666666785 -4.0203411487384919 -7.1746481373430634e-043 -1.0000000000000018 -4.0203411487384919 -7.1746481373430634e-043 -0.83333333333333925 -4.0203411487384919 -7.1746481373430634e-043 -0.66666666666667673 -4.0203411487384919 -7.1746481373430634e-043 -0.50000000000001421 -3.6668564270071045 -7.1746481373430634e-043 -0.50011556899859544 -3.313371705275717 -7.1746481373430634e-043 -0.50023113799717711 -2.9598869835443331 -7.1746481373430634e-043 -0.50034670699575834 -2.8572560486797869 6.7066936397272055e-017 -1.1156273397278738 -2.2695715546368866 1.3838652842523647e-016 -2.2803646677088052 -1.1079612500927603 1.7456330011428195e-016 -2.8711761851885087 -0.50000000008492584 1.8103232237295048e-016 -2.9768233360759733 -0.49999999999998579 -7.1746481373430634e-043 -3.3246626072430701 -0.49999999999998579 -7.1746481373430634e-043 -3.6725018779907819 -0.49999999999998579 -7.1746481373430634e-043 -4.0203411487384937;')
        self.controller = PyNode('FourArrowCircle_CTL')
        return self.controller
    
    def rig101DoublePlus(self):
        mel.eval('createNode transform -n "DoublePlus_CTL";')
        mel.eval('setAttr ".rp" -type "double3" 0 0 0 ;')
        mel.eval('setAttr ".sp" -type "double3" 0 0 0 ;')
        mel.eval('createNode nurbsCurve -n "DoublePlus_CTLShape" -p "DoublePlus_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve"  1 27 0 no 3 28 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  28 0.073413968141075911 0.074420819684248393 1.6667634480423354 0.072407116597526078 0.22225560756445004 1.6667634480423354 -0.075427671227802112 0.22124875602127375 1.6667634480423354 -0.074420819684252279 0.073413968141072164 1.6667634480423354 -0.22225560756445401 0.07240711659752215 1.6667634480423354 -0.22124875602127772 -0.07542767122780622 1.6667634480423354 -0.07341396814107598 -0.07442081968425622 1.6667634480423354 -0.072407116597525911 -0.22225560756445789 1.6667634480423354 0.075427671227802279 -0.22124875602128163 1.6667634480423354 0.07442081968425221 -0.073413968141079908 1.6667634480423354 0.22225560756445417 -0.072407116597529922 1.6667634480423354 0.22124875602127789 0.075427671227798407 1.6667634480423354 0.073413968141075911 0.074420819684248393 1.6667634480423354 -2.5175414076007122e-016 -3.5245579706407619e-015 1.6667634480423354 -2.1702943168970035e-016 3.8197179977387681e-016 -1.7301252867103609 0.073413968141075953 0.074420819684252307 -1.7301252867103609 0.22124875602127791 0.075427671227802306 -1.7301252867103609 0.2222556075644542 -0.07240711659752605 -1.7301252867103609 0.074420819684252237 -0.073413968141076036 -1.7301252867103609 0.07542767122780232 -0.22124875602127775 -1.7301252867103609 -0.07240711659752587 -0.22225560756445401 -1.7301252867103609 -0.073413968141075953 -0.074420819684252307 -1.7301252867103609 -0.22124875602127766 -0.07542767122780232 -1.7301252867103609 -0.22225560756445398 0.072407116597525994 -1.7301252867103609 -0.074420819684252237 0.073413968141076008 -1.7301252867103609 -0.075427671227802071 0.22124875602127764 -1.7301252867103609 0.072407116597526119 0.22225560756445398 -1.7301252867103609 0.073413968141075953 0.074420819684252307 -1.7301252867103609 ;')
        self.controller = PyNode('DoublePlus_CTL')
        return self.controller
    
    def rig101Cylinder(self):
        mel.eval('createNode transform -n "cylinder_CTL";')
        mel.eval('createNode nurbsSurface -n "cylinder_CTLShape" -p "cylinder_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".ovs" no;')
        mel.eval('setAttr ".ove" yes;')
        mel.eval('setAttr ".vir" yes;')
        mel.eval('setAttr ".vif" yes;')
        mel.eval('setAttr ".covm[0]"  0 1 1;')
        mel.eval('setAttr ".cdvm[0]"  0 1 1;')
        mel.eval('setAttr ".dvu" 0;')
        mel.eval('setAttr ".dvv" 0;')
        mel.eval('setAttr ".cpr" 3;')
        mel.eval('setAttr ".cps" 1;')
        mel.eval('setAttr ".cc" -type "nurbsSurface"  3 3 0 2 no  6 0 0 0 2 2 2 9 -2 -1 0 1 2 3 4 5 6  28 -3.3306690738754696e-016 -0.26836074551848688 -1.4034096123012263 1.3118701990512807 -0.26836074551848688 -1.3877787807814457e-016 1.1102230246251565e-016 -0.26836074551848688 1.4034096123012263 -1.3118701990512807 -0.26836074551848688 1.8041124150158794e-016 -3.3306690738754696e-016 -0.26836074551848688 -1.4034096123012263 1.3118701990512807 -0.26836074551848688 -1.3877787807814457e-016 1.1102230246251565e-016 -0.26836074551848688 1.4034096123012263 -3.3306690738754696e-016 -0.089453581839495477 -1.4034096123012263 1.3118701990512807 -0.089453581839495699 -1.1102230246251565e-016 1.1102230246251565e-016 -0.089453581839495699 1.4034096123012263 -1.3118701990512807 -0.089453581839495699 2.2204460492503131e-016 -3.3306690738754696e-016 -0.089453581839495477 -1.4034096123012263 1.3118701990512807 -0.089453581839495699 -1.1102230246251565e-016 1.1102230246251565e-016 -0.089453581839495699 1.4034096123012263 -3.3306690738754696e-016 0.089453581839495699 -1.4034096123012263 1.3118701990512807 0.089453581839495699 -6.9388939039072284e-017 1.1102230246251565e-016 0.089453581839495477 1.4034096123012263 -1.3118701990512807 0.089453581839495699 2.6367796834847468e-016 -3.3306690738754696e-016 0.089453581839495699 -1.4034096123012263 1.3118701990512807 0.089453581839495699 -6.9388939039072284e-017 1.1102230246251565e-016 0.089453581839495477 1.4034096123012263 -3.3306690738754696e-016 0.26836074551848688 -1.4034096123012263 1.3118701990512807 0.26836074551848688 -2.7755575615628914e-017 1.1102230246251565e-016 0.26836074551848688 1.4034096123012263 -1.3118701990512807 0.26836074551848688 3.0531133177191805e-016 -3.3306690738754696e-016 0.26836074551848688 -1.4034096123012263 1.3118701990512807 0.26836074551848688 -2.7755575615628914e-017 1.1102230246251565e-016 0.26836074551848688 1.4034096123012263;')
        self.controller = PyNode('cylinder_CTL')
        return self.controller

    def rig101Hex(self):
        mel.eval('createNode transform -n "nurbsCircle1";')
        mel.eval('createNode nurbsCurve -n "nurbsCircleShape1" -p "nurbsCircle1";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".tw" yes;')
        mel.eval('createNode makeNurbCircle -n "makeNurbCircle19";')
        mel.eval('setAttr ".nr" -type "double3" 0 1 0 ;')
        mel.eval('setAttr ".d" 1;')
        mel.eval('setAttr ".s" 6;')
        self.controller = PyNode('hex_CTL')
        return self.controller

    
    def rig101Trapezoid(self):
        mel.eval('createNode transform -n "trapezoid_CTL";')
        #mel.eval('setAttr ".ove" yes;')
        #mel.eval('setAttr ".ovc" 17;')
        #mel.eval('setAttr ".t" -type "double3" 0 4.864 0 ;')
        mel.eval('createNode nurbsCurve -n "trapezoid_CTLShape" -p "trapezoid_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 1 15 0 no 3 16 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 2.1811584507305657 0.84883267146266206 1.8660257304095589 2.1811584507305657 0.84883267146266206 -1.8660257304095589 -2.1811584507305657 0.84883267146266206 -1.8660257304095589 -2.4737851126879433 -0.38869212521046925 -2.11637383347077 2.4737851126879433 -0.38869212521046925 -2.11637383347077 2.1811584507305657 0.84883267146266206 -1.8660257304095589 -2.1811584507305657 0.84883267146266206 -1.8660257304095589 -2.1811584507305657 0.84883267146266206 1.8660257304095589 2.1811584507305657 0.84883267146266206 1.8660257304095589 2.4737851126879433 -0.38869212521046925 2.11637383347077 2.4737851126879433 -0.38869212521046925 -2.11637383347077 -2.4737851126879433 -0.38869212521046925 -2.11637383347077 -2.4737851126879433 -0.38869212521046925 2.11637383347077 2.4737851126879433 -0.38869212521046925 2.11637383347077 -2.4737851126879433 -0.38869212521046925 2.11637383347077 -2.1811584507305657 0.84883267146266206 1.8660257304095589;')
        self.controller = PyNode('trapezoid_CTL')
        return self.controller
    
    def rig101Paw4Toes(self):
        self.controllers = []
        mel.eval('createNode transform -n "Toe1_CTL";')
        mel.eval('setAttr ".rp" -type "double3" 0.64154106628213992 0 -1.8912725396471126 ;')
        mel.eval('setAttr ".sp" -type "double3" 0.64154106628213992 0 -1.8912725396471126 ;')
        mel.eval('createNode nurbsCurve -n "Toe1_CTLShape" -p "Toe1_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 3 8 2 no 3 13 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 1.0573354286393852 4.1661919436043143e-017 -2.4116086150311489 0.6415410662821398 5.8918851500947502e-017 -2.743506219631993 0.22574670392489504 4.1661919436043167e-017 -2.521624458751591 0.15945781383715613 1.7073209131693398e-032 -1.8912725396471128 0.14357885921886787 -4.1661919436043155e-017 -1.2108817614235496 0.64154106628213969 -5.8918851500947514e-017 -1.0690748381048722 1.1395032733454113 -4.1661919436043174e-017 -1.2108817614235492 1.1236243187271238 -3.1645430076193226e-032 -1.8912725396471122 1.0573354286393852 4.1661919436043143e-017 -2.4116086150311489 0.6415410662821398 5.8918851500947502e-017 -2.743506219631993 0.22574670392489504 4.1661919436043167e-017 -2.521624458751591;')
        self.controllers.append(PyNode('Toe1_CTL'))
        mel.eval('createNode transform -n "Toe2_CTL";')
        mel.eval('setAttr ".rp" -type "double3" -0.64855788646482981 0 -1.8912725396471126 ;')
        mel.eval('setAttr ".sp" -type "double3" -0.64855788646482981 0 -1.8912725396471126 ;')
        mel.eval('createNode nurbsCurve -n "Toe2_CTLShape" -p "Toe2_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 3 8 2 no 3 13 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 -1.0643522488220751 -9.2582042932474657e-017 -2.4116086150311489 -0.6485578864648297 -5.891885150094749e-017 -2.743506219631993 -0.23276352410758494 9.2582040603882978e-018 -2.521624458751591 -0.16647463401984602 5.9038171202929474e-017 -1.8912725396471128 -0.15059567940155777 1.0264470173368192e-016 -1.2108817614235496 -0.64855788646482959 5.8918851500947539e-017 -1.0690748381048722 -1.1465200935281012 -1.9320862861595514e-017 -1.2108817614235492 -1.1306411389098137 -5.9038171202929449e-017 -1.8912725396471122 -1.0643522488220751 -9.2582042932474657e-017 -2.4116086150311489 -0.6485578864648297 -5.891885150094749e-017 -2.743506219631993 -0.23276352410758494 9.2582040603882978e-018 -2.521624458751591;')
        self.controllers.append(PyNode('Toe2_CTL'))
        mel.eval('createNode transform -n "Toe3_CTL";')
        mel.eval('setAttr ".rp" -type "double3" 1.5400028369452077 0 -0.98129202833451679 ;')
        mel.eval('setAttr ".sp" -type "double3" 1.5400028369452077 0 -0.98129202833451679 ;')
        mel.eval('createNode nurbsCurve -n "Toe3_CTLShape" -p "Toe3_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 3 8 2 no 3 13 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 1.9923916783580893 3.6977379174064613e-017 -1.2178317607366047 1.7002234902806046 5.2293911128974648e-017 -1.536341490587567 1.3039443126648509 3.6977379174064637e-017 -1.4941814343973883 1.1289103130394309 1.5153467154817418e-032 -1.0999580522490711 0.98745562291808187 -3.6977379174064625e-017 -0.66073643351705702 1.3854289729853877 -5.2293911128974655e-017 -0.445804634648303 1.8367219663270689 -3.6977379174064644e-017 -0.41558709521409232 1.9510953608509845 -2.808716167890709e-032 -0.86262600441996229 1.9923916783580893 3.6977379174064613e-017 -1.2178317607366047 1.7002234902806046 5.2293911128974648e-017 -1.536341490587567 1.3039443126648509 3.6977379174064637e-017 -1.4941814343973883;')
        self.controllers.append(PyNode('Toe3_CTL'))
        mel.eval('createNode transform -n "Toe4_CTL";')
        mel.eval('setAttr ".rp" -type "double3" -1.5585383977774256 0 -0.98129202833451679 ;')
        mel.eval('setAttr ".sp" -type "double3" -1.5585383977774256 0 -0.98129202833451679 ;')
        mel.eval('createNode nurbsCurve -n "Toe4_CTLShape" -p "Toe4_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 3 8 2 no 3 13 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 -2.0109259160151249 -9.2378871792465936e-017 -1.2178342913288407 -1.7187559462461253 -7.1914901918917537e-017 -1.5363423868294031 -1.3224770044736593 -8.0681962028924491e-018 -1.4941801139130662 -1.1474452100779811 5.0344395646740673e-017 -1.0999557526567396 -1.0059929768992957 1.0464467728025754e-016 -0.66073334265508632 -1.4039675292569109 7.1223383066482134e-017 -0.4458037699934615 -1.8552606916239553 6.3937843458336002e-019 -0.41558875502564929 -1.9696315854768702 -5.0344395646740648e-017 -0.86262830401229385 -2.0109259160151249 -9.2378871792465936e-017 -1.2178342913288407 -1.7187559462461253 -7.1914901918917537e-017 -1.5363423868294031 -1.3224770044736593 -8.0681962028924491e-018 -1.4941801139130662;')
        self.controllers.append(PyNode('Toe4_CTL'))
        mel.eval('createNode transform -n "Palm_CTL";')
        mel.eval('setAttr ".rp" -type "double3" -0.010034757147716178 0 0.025436761471666625 ;')
        mel.eval('setAttr ".sp" -type "double3" -0.010034757147716178 0 0.025436761471666625 ;')
        mel.eval('createNode nurbsCurve -n "Palm_CTLShape" -p "Palm_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 3 8 2 no 3 13 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 0.74488792456271613 6.1853557931306022e-016 -0.5576270162228536 -0.010034757147716376 8.747414050748296e-016 -1.497303792380033 -0.7649574388581476 6.1853557931306061e-016 -0.55762701622285427 -1.7410937341657742 2.5347817488862154e-031 0.025436761471666122 -1.234078298431033 -6.1853557931306041e-016 0.97706390322974457 -0.0100347571477167 -8.747414050748298e-016 0.42646272904297522 1.2140087841355998 -6.1853557931306071e-016 0.97706390322974523 1.7210242198703418 -4.6982531505389881e-031 0.025436761471667554 0.74488792456271613 6.1853557931306022e-016 -0.5576270162228536 -0.010034757147716376 8.747414050748296e-016 -1.497303792380033 -0.7649574388581476 6.1853557931306061e-016 -0.55762701622285427;')
        self.controllers.append(PyNode('Palm_CTL'))
        parent(self.controllers[0],self.controllers[1],self.controllers[2],self.controllers[3],self.controllers[4])
        return self.controllers
    
    def rig101FourArrowsCircular(self):
        mel.eval('createNode transform -n "FourArrowCircular_CTL";')
        mel.eval('setAttr -l on -k off ".v";')
        mel.eval('setAttr ".ove" yes;')
        mel.eval('createNode nurbsCurve -n "FourArrowCircular_CTLShape" -p "FourArrowCircular_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".ove" yes;')
        mel.eval('setAttr ".ovc" 13;')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 1 32 0 no 3 33 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 1.9853952278012348 0.19819221118097949 -2.2837234370462145 2.5189768811751283 1.127400217442204 -1.7127920077470506 2.655250731134136 0.59586248083750537 -1.7127920077470506 3.0364134780653012 0.69358369874585923 -1.1418605784478866 3.2651106844805575 0.75221631623817942 -0.22520042642572249 2.8071903123797171 1.5876713223253629 -0.22520042642572249 2.2842397250427586 2.0429952248860785 -0.22520042642572249 2.2842397250427586 2.0429952248860785 -0.76758528425992822 1.4182444324415227 2.4103704843400444 0 2.2842397250427586 2.0429952248860785 0.76758528425992822 2.2842397250427586 2.0429952248860785 0.22520042642572249 2.8071903123797171 1.5876713223253629 0.22520042642572249 3.2651106844805575 0.75221631623817942 0.22520042642572249 3.0364134780653012 0.69358369874585923 1.1418605784478866 2.655250731134136 0.59586248083750537 1.7127920077470506 2.5189768811751283 1.127400217442204 1.7127920077470506 1.9853952278012348 0.19819221118097949 2.2837234370462145 2.9002284788182267 -0.35967607305003724 1.7127920077470506 2.7639546288592189 0.17186166355466137 1.7127920077470506 3.1451173757903841 0.26958288146301523 1.1418605784478866 3.3738145822056405 0.32821549895533542 0.22520042642572249 3.3743405414759682 -0.62450474211648843 0.22520042642572249 3.1349656349505963 -1.275271080493912 0.22520042642572249 3.1349656349505963 -1.275271080493912 0.76758528425992822 2.5525460231609469 -2.0139860619780854 0 3.1349656349505963 -1.275271080493912 -0.76758528425992822 3.1349656349505963 -1.275271080493912 -0.22520042642572249 3.3743405414759682 -0.62450474211648843 -0.22520042642572249 3.3738145822056405 0.32821549895533542 -0.22520042642572249 3.1451173757903841 0.26958288146301523 -1.1418605784478866 2.7639546288592189 0.17186166355466137 -1.7127920077470506 2.9002284788182267 -0.35967607305003724 -1.7127920077470506 1.9853952278012348 0.19819221118097949 -2.2837234370462145;')
        self.controller = PyNode('FourArrowCircular_CTL')
        return self.controller
    
    def rig101HeadController(self):
        mel.eval('createNode transform -n "HeadController_CTL";')
        mel.eval('setAttr ".rp" -type "double3" 3.4266234992241457e-014 0 0 ;')
        mel.eval('setAttr ".sp" -type "double3" 3.4266234992241457e-014 0 0 ;')
        mel.eval('createNode nurbsCurve -n "HeadController_CTLShape1" -p "HeadController_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 3 8 2 no 3 13 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 9.6044264783208426 15.898983182919128 -1.3703159908258815 3.271661016919701e-014 17.782056728582301 -1.3703159908258904 -9.6044264783207645 15.898983182919137 -1.3703159908258815 -13.582710184456506 -1.1256461191510989 -6.0264765073952882 -9.604426478320768 -16.556654593243927 -0.12755036872366265 3.0173499331885282e-014 -16.556654593243984 12.112515140003051 9.6044264783208266 -16.556654593243927 -0.12755036872365816 13.582710184456573 -1.125646119151118 -6.0264765073952882 9.6044264783208426 15.898983182919128 -1.3703159908258815 3.271661016919701e-014 17.782056728582301 -1.3703159908258904 -9.6044264783207645 15.898983182919137 -1.3703159908258815;')
        self.controller = PyNode('HeadController_CTL')
        return self.controller

    def rig101NeckBaseController(self):
        mel.eval('createNode transform -n "NeckBaseController";')
        mel.eval('createNode nurbsCurve -n "NeckBaseControllerShape" -p "NeckBaseController";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 3 8 2 no 3 13 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 12.383816324208819 10.584571300018155 -5.4578557765341671 -1.9984014443252818e-015 19.556510127417578 -4.6447669310621649 -12.383816324208807 10.584571300018162 -5.4578557765341706 -17.513360999633427 -2.0659168479935133 -4.0064899243970196 -12.38381632420881 -18.885365573862096 7.3956944535491758 -5.2770288139214472e-015 -26.500611320793311 13.664843901484268 12.3838163242088 -18.885365573862103 7.3956944535491758 17.513360999633427 -2.0659168479935346 -4.0064899243970089 12.383816324208819 10.584571300018155 -5.4578557765341671 -1.9984014443252818e-015 19.556510127417578 -4.6447669310621649 -12.383816324208807 10.584571300018162 -5.4578557765341706;')
        self.controller = PyNode('NeckBaseController')
        return self.controller
    
    def rig101JawController(self):
        mel.eval('createNode transform -n "Jaw_CTL";')
        mel.eval('setAttr ".t" -type "double3" 1.9721522630525295e-030 0 0 ;')
        mel.eval('createNode nurbsCurve -n "Jaw_CTLShape" -p "Jaw_CTL";')
        mel.eval('setAttr -k off ".v";')
        mel.eval('setAttr ".cc" -type "nurbsCurve" 3 8 2 no 3 13 -2 -1 0 1 2 3 4 5 6 7 8 9 10 11 9.8336772220744813 -3.7309796539992446 0.9644318625895778 -1.1977283973868031e-015 -19.764615744249227 18.434231545237047 -9.8336772220744724 -3.7309796539992455 0.9644318625895778 -10.498281557878707 -4.7969133517591462 0.3294873472337656 -9.8336772220744759 -5.8628470495190399 -0.3054571681220466 -3.1633371190941695e-015 -23.273882545848114 18.434231545237047 9.8336772220744653 -5.8628470495190399 -0.3054571681220466 10.498281557878707 -4.796913351759148 0.3294873472337656 9.8336772220744813 -3.7309796539992446 0.9644318625895778 -1.1977283973868031e-015 -19.764615744249227 18.434231545237047 -9.8336772220744724 -3.7309796539992455 0.9644318625895778;')
        self.controller = PyNode('Jaw_CTL')
        return self.controller

    def rig101WC2NailLong(self):
        control = self.rig101WC2Nail()
        control.setScale((0.129,0.129,0.129))
        mel.eval('select -r '+control.name()+'.cv[19:32] ;move -r -os -wd 1.0 0 0 ;select -r '+control.name()+'.cv[1:17] ;move -r -os -wd -1.0 0 0 ;')
        makeIdentity(apply=True,t=True,r=True,s=True)
        return control
    
    def rig101WCGetByName(self, name):
        control = None
        if name == ControllerShapes.FOURARROWCIRCLE:
            control = self.rig101FourArrowCircle()
        elif name == ControllerShapes.TRIANGLE:
            control = self.rig101WCTriangle()
        elif name == ControllerShapes.SQUARE:
            control = self.rig101WCSquare()
        elif name == ControllerShapes.ANGLE:
            control = self.rig101WCAngle()
        elif name == ControllerShapes.CROSS:
            control = self.rig101WCCross()
        elif name == ControllerShapes.FATCROSS:
            control = self.rig101WCFatCross()
        elif name == ControllerShapes.CIRCLE:
            control = self.rig101WCCircle()
        elif name == ControllerShapes.TWOSEVENTYARC:
            control = self.rig101WC270Arc()
        elif name == ControllerShapes.ONEEIGHTYARC:
            control = self.rig101WC180Arc()
        elif name == ControllerShapes.SPIRAL:
            control = self.rig101WCSpiral()
        elif name == ControllerShapes.HALFPYRAMID:
            control = self.rig101WC12Pyramid()
        elif name == ControllerShapes.PYRAMID:
            control = self.rig101WCPyramid()
        elif name == ControllerShapes.HALFSPEAR:
            control = self.rig101WC12Spear()
        elif name == ControllerShapes.SPEAR:
            control = self.rig101WCSpear()
        elif name == ControllerShapes.CUBE:
            control = self.rig101WCCube()
        elif name == ControllerShapes.SPHERE:
            control = self.rig101WCSphere()
        elif name == ControllerShapes.HEXAGON:
            control = self.rig101WCHexagon()
        elif name == ControllerShapes.ROMBUS:
            control = self.rig101WCRombus()
        elif name == ControllerShapes.ROMBUSTWO:
            control = self.rig101WCRombus2()
        elif name == ControllerShapes.ROMBUSTHREE:
            control = self.rig101WCRombus3()
        elif name == ControllerShapes.CONE:
            control = self.rig101WCCone()
        elif name == ControllerShapes.DIRSINGLETHIN:
            control = self.rig101WCDirSingleThin()
        elif name == ControllerShapes.DIRSINGLENORMAL:
            control = self.rig101WCDirSingleNormal()
        elif name == ControllerShapes.DIRSINGLEFAT:
            control = self.rig101WCDirSingleFat()
        elif name == ControllerShapes.DIRDOUBLETHIN:
            control = self.rig101WCDirDoubleThin()
        elif name == ControllerShapes.DIRDOUBLENORMAL:
            control = self.rig101WCDirDoubleNormal()
        elif name == ControllerShapes.DIRDOUBLEFAT:
            control = self.rig101WCDirDoubleFat()
        elif name == ControllerShapes.DIRFOURTHIN:
            control = self.rig101WCDirFourThin()
        elif name == ControllerShapes.DIRFOURNORMAL:
            control = self.rig101WCDirFourNormal()
        elif name == ControllerShapes.DIRFOURFAT:
            control = self.rig101WCDirFourFat()
        elif name == ControllerShapes.DIREIGHT:
            control = self.rig101WCDirEight()
        elif name == ControllerShapes.ROTNINETYTHIN:
            control = self.rig101WCRot90Thin()
        elif name == ControllerShapes.ROTNINETYNORMAL:
            control = self.rig101WCRot90Normal()
        elif name == ControllerShapes.ROTNINETYFAT:
            control = self.rig101WCRot90Fat()
        elif name == ControllerShapes.ROTONEEIGHTYTHIN:
            control = self.rig101WCRot180Thin()
        elif name == ControllerShapes.ROTONEEIGHTYNORMAL:
            control = self.rig101WCRot180Normal()
        elif name == ControllerShapes.ROTONEEIGHTYFAT:
            control = self.rig101WCRot180Fat()
        elif name == ControllerShapes.TRANSFORM:
            control = self.rig101WCTransform()
        elif name == ControllerShapes.FOOTPRINT:
            control = self.rig101WCFootPrint()
        elif name == ControllerShapes.HAND:
            control = self.rig101WCHand()
        elif name == ControllerShapes.VISION:
            control = self.rig101WCVision()
        elif name == ControllerShapes.ARROWSONBALL:
            control = self.rig101WCArrowsOnBall()
        elif name == ControllerShapes.COG:
            control = self.rig101WCCog()
        elif name == ControllerShapes.SUN:
            control = self.rig101WCSun()
        elif name == ControllerShapes.PIN:
            control = self.rig101WCPin()
        elif name == ControllerShapes.JACK:
            control = self.rig101WCJack()
        elif name == ControllerShapes.NAIL:
            control = self.rig101WCNail()
        elif name == ControllerShapes.TWONAIL:
            control = self.rig101WC2Nail()
        elif name == ControllerShapes.FOURNAIL:
            control = self.rig101WC4Nail()
        elif name == ControllerShapes.DUMBELL:
            control = self.rig101WCDumbell()
        elif name == ControllerShapes.POINTER:
            control = self.rig101WCPointer()
        elif name == ControllerShapes.AIM:
            control = self.rig101WCAim()
        elif name == ControllerShapes.AIMTWO:
            control = self.rig101WCAim2()
        elif name == ControllerShapes.SWITCH:
            control = self.rig101WCSwitch()
        elif name == ControllerShapes.DOUBLEPLUS:
            control = self.rig101DoublePlus()
        elif name == ControllerShapes.CYLINDER:
            control = self.rig101Cylinder()
        elif name == ControllerShapes.HEX:
            control = self.rig101Hex()
        elif name == ControllerShapes.TRAPEZOID:
            control = self.rig101Trapezoid()
        elif name == ControllerShapes.PAWSFOURTOES:
            control = self.rig101Paw4Toes()
        elif name == ControllerShapes.FOURARROWSCIRCULAR:
            control = self.rig101FourArrowsCircular()
        elif name == ControllerShapes.HEADCONTROLLER:
            control = self.rig101HeadController()
        elif name == ControllerShapes.NECKBASECONTROLLER:
            control = self.rig101NeckBaseController()
        elif name == ControllerShapes.JAWCONTROLLER:
            control = self.rig101JawController()
        elif name == ControllerShapes.TWONAILLONG:
            control = self.rig101WC2NailLong()
        else:
            print "name does not match any controller shape"
            
        return control
        
    def rig101WCButtonPressed(self, Type):
        method = getattr(self, Type)
        method()

    def rig101WireControllers(self):
        if window('rig101WCWindow', exists=True):
            deleteUI('rig101WCWindow')
    
        rigWindow = window('rig101WCWindow', title="Rigging 101 wireControllers", widthHeight=[300, 50], minimizeButton=False, maximizeButton=False, resizeToFitChildren=True, sizeable=True)

        tabs = tabLayout(innerMarginWidth=5,innerMarginHeight=5)

        flatShapes = rowColumnLayout(numberOfColumns=4)
        button(l='Triangle', c=Callback(self.rig101WCButtonPressed,'rig101WCTriangle') )
        button(l='Square', c=Callback(self.rig101WCButtonPressed,'rig101WCSquare') )
        button(l='Angle', c=Callback(self.rig101WCButtonPressed,'rig101WCAngle') )
        button(l='Cross', c=Callback(self.rig101WCButtonPressed,'rig101WCCross') )
        button(l='Fat Cross', c=Callback(self.rig101WCButtonPressed,'rig101WCFatCross') )
        button(l='Circle', c=Callback(self.rig101WCButtonPressed,'rig101WCCircle') )
        button(l='270 Arc', c=Callback(self.rig101WCButtonPressed,'rig101WC270Arc') )
        button(l='180 Arc', c=Callback(self.rig101WCButtonPressed,'rig101WC180Arc') )
        button(l='Spiral', c=Callback(self.rig101WCButtonPressed,'rig101WCSpiral') )
        setParent( '..' )

        prisms = rowColumnLayout(numberOfColumns=4)
        button(l='1/2 Pyramid', c=Callback(self.rig101WCButtonPressed,'rig101WC12Pyramid') )
        button(l='Pyramid', c=Callback(self.rig101WCButtonPressed,'rig101WCPyramid') )
        button(l='1/2 Spear', c=Callback(self.rig101WCButtonPressed,'rig101WC12Spear') )
        button(l='Spear', c=Callback(self.rig101WCButtonPressed,'rig101WCSpear') )
        button(l='Cube', c=Callback(self.rig101WCButtonPressed,'rig101WCCube') )
        button(l='Sphere', c=Callback(self.rig101WCButtonPressed,'rig101WCSphere') )
        button(l='Hexagon', c=Callback(self.rig101WCButtonPressed,'rig101WCHexagon') )
        button(l='Rombus', c=Callback(self.rig101WCButtonPressed,'rig101WCRombus') )
        button(l='Rombus2', c=Callback(self.rig101WCButtonPressed,'rig101WCRombus2') )
        button(l='Rombus3', c=Callback(self.rig101WCButtonPressed,'rig101WCRombus3') )
        button(l='Cone', c=Callback(self.rig101WCButtonPressed,'rig101WCCone') )
        setParent( '..' )

        directionArrows = rowColumnLayout(numberOfColumns=4)
        button(l='Single Thin', c=Callback(self.rig101WCButtonPressed,'rig101WCDirSingleThin') )
        button(l='Single Normal', c=Callback(self.rig101WCButtonPressed,'rig101WCDirSingleNormal') )
        button(l='Single Fat', c=Callback(self.rig101WCButtonPressed,'rig101WCDirSingleFat') )
        button(l='Double Thin', c=Callback(self.rig101WCButtonPressed,'rig101WCDirDoubleThin') )
        button(l='Double Normal', c=Callback(self.rig101WCButtonPressed,'rig101WCDirDoubleNormal') )
        button(l='Double Fat', c=Callback(self.rig101WCButtonPressed,'rig101WCDirDoubleFat') )
        button(l='Four Thin', c=Callback(self.rig101WCButtonPressed,'rig101WCDirFourThin') )
        button(l='Four Normal', c=Callback(self.rig101WCButtonPressed,'rig101WCDirFourNormal') )
        button(l='Four Fat', c=Callback(self.rig101WCButtonPressed,'rig101WCDirFourFat') )
        button(l='Eight', c=Callback(self.rig101WCButtonPressed,'rig101WCDirEight') )
        setParent( '..' )

        rotationArrows = rowColumnLayout(numberOfColumns=4)
        button(l='90 Thin', c=Callback(self.rig101WCButtonPressed,'rig101WCRot90Thin') )
        button(l='90 Normal', c=Callback(self.rig101WCButtonPressed,'rig101WCRot90Normal') )
        button(l='90 Fat', c=Callback(self.rig101WCButtonPressed,'rig101WCRot90Fat') )
        button(l='180 Thin', c=Callback(self.rig101WCButtonPressed,'rig101WCRot180Thin') )
        button(l='180 Normal', c=Callback(self.rig101WCButtonPressed,'rig101WCRot180Normal') )
        button(l='180 Fat', c=Callback(self.rig101WCButtonPressed,'rig101WCRot180Fat') )
        setParent( '..' )

        char = rowColumnLayout(numberOfColumns=4)
        button(l='Transform', c=Callback(self.rig101WCButtonPressed,'rig101WCTransform') )
        button(l='Footprint', c=Callback(self.rig101WCButtonPressed,'rig101WCFootPrint') )
        button(l='Hand', c=Callback(self.rig101WCButtonPressed,'rig101WCHand') )
        button(l='Vision', c=Callback(self.rig101WCButtonPressed,'rig101WCVision') )
        setParent( '..' )

        special = rowColumnLayout(numberOfColumns=4)
        button(l='Arrows on Ball', c=Callback(self.rig101WCButtonPressed,'rig101WCArrowsOnBall') )
        button(l='Cog', c=Callback(self.rig101WCButtonPressed,'rig101WCCog') )
        button(l='Sun', c=Callback(self.rig101WCButtonPressed,'rig101WCSun') )
        button(l='Pin', c=Callback(self.rig101WCButtonPressed,'rig101WCPin') )
        button(l='Jack', c=Callback(self.rig101WCButtonPressed,'rig101WCJack') )
        button(l='Nail', c=Callback(self.rig101WCButtonPressed,'rig101WCNail') )
        button(l='Double Nail', c=Callback(self.rig101WCButtonPressed,'rig101WC2Nail') )
        button(l='Four Nails', c=Callback(self.rig101WCButtonPressed,'rig101WC4Nail') )
        button(l='Dumbell', c=Callback(self.rig101WCButtonPressed,'rig101WCDumbell') )
        button(l='Pointer', c=Callback(self.rig101WCButtonPressed,'rig101WCPointer') )
        button(l='Aim', c=Callback(self.rig101WCButtonPressed,'rig101WCAim') )
        button(l='Aim2', c=Callback(self.rig101WCButtonPressed,'rig101WCAim2') )
        setParent( '..' )
    
        tabLayout(tabs, edit=True,tabLabel=((flatShapes,'Flat Shapes'),(prisms,'Prisms'),(directionArrows,'Direction  Arrows'),(rotationArrows,'Rotation Arrows'),(char,'Character'),(special,'Special') ) )
    
        rigWindow.show()

#newR101 = rig101()
#newR101.rig101WireControllers()